openapi: 3.0.0
info:
  title: CompassCar
  version: 1.0.0
  description: 'This API provides a comprehensive solution for managing a car rental service. It includes endpoints for user authentication, customer management, car inventory, and order processing. Key Features: Authentication for secure user login, user management for profiles, customer management for data handling, car management for vehicle listings, and order management for tracking rentals.'

servers:
  - url: http://localhost:3003/compass/api/v1
    description: API test
paths:
  /login:
    post:
      tags:
        - Auth
      description: Login a user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'admin212@admin.com'
                password:
                  type: string
                  minLength: 8
                  example: 'S3cr3t!@iJ821'
              required:
                - email
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjViZGY0YzYwLWZkZTItNDc3Zi1hMDU0LWY4MGJkY2Q1MWU4NCIsImlhdCI6MTcyODkzMDEzNCwiZXhwIjoxNzI5Nzk0MTM0fQ.WAfL0xSzeomNPjis0Uyb88QvOK968C7GGQqC3eMKHxg'
                  expiresIn:
                    type: number
                    example: '1729794134'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'invalid email or password'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'invalid credentials.'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'internal server error'
  /users:
    post:
      tags:
        - Users
      description: Register user in the database, where it is necessary to inform the Name, Email and Password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: 'd2e48582-554f-444a-8531-b8e69f373db4'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: email is invalid
        '409':
          description: Conflict - Email address already used
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: email address already used.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: internal server error
    get:
      tags:
        - Users
      description: Returns a list of all users of the application.
      responses:
        '200':
          description: Uma lista de usuários com informações paginadas
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    example: 11
                  total_pages:
                    type: integer
                    example: 11
                  limit:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: '5bdf4c60-fde2-477f-a054-f80bdcd51e84'
                        name:
                          type: string
                          example: 'Admin'
                        excluded_at:
                          type: string
                          nullable: true
                          example: null
                          format: date-time
                          example: '2024-10-12T16:36:47.963Z'
                        created_at:
                          type: string
                          format: date-time
                          example: '2024-10-12T16:36:47.963Z'
                        updated_at:
                          type: string
                          format: date-time
                          example: '2024-10-12T16:36:47.963Z'
  /users/{id}:
    get:
      tags:
        - Users
      description: Returns a user by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
            example: 'e1ef1217-14a1-4885-aeb3-b76c9fe789e2'
      responses:
        200:
          description: 'Usuário encontrado'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 'e1ef1217-14a1-4885-aeb3-b76c9fe789e2'
                  name:
                    type: string
                    example: 'Jose Fernando'
                  email:
                    type: string
                    example: 'fernandojose@emaildele.com.br'
                  excluded_at:
                    type: string
                    format: date-time
                    example: null
                  created_at:
                    type: string
                    format: date-time
                    example: '2024-10-14T18:25:54.366Z'
                  updated_at:
                    type: string
                    format: date-time
                    example: '2024-10-14T18:25:54.366Z'
        '404':
          description: User not found
        '500':
          description: Internal server error
    patch:
      tags:
        - Users
      description: Updates a user by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
            example: 'e1ef1217-14a1-4885-aeb3-b76c9fe789e2'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
        '400':
          description: Bad Request
        '404':
          description: User not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Users
      description: Deletes a user by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
            example: 'e1ef1217-14a1-4885-aeb3-b76c9fe789e2'
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
        '500':
          description: Internal server error
  /cars:
    post:
      tags:
        - Cars
      description: Create a new car.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                license_plate:
                  type: string
                  example: 'EFG8H96'
                brand:
                  type: string
                  example: 'Fiat'
                model:
                  type: string
                  example: 'Cronos'
                year:
                  type: number
                  example: 2013
                km:
                  type: number
                  example: 5000
                price:
                  type: number
                  example: 130.50
                items:
                  type: array
                  items:
                    type: string
                    maxItems: 5
                    example:
                      - "air conditioning"
                      - "leather seats"
                      - "sunroof"
                      - "navigation system"
              required:
                - license_plate
                - brand
                - model
                - year
                - km
                - price
                - items
      responses:
        '201':
          description: Car created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '4ca66fb8-9bc6-4e2d-bf5b-02debdf45f68'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Items must be unique'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: internal server error
    get:
      tags:
        - Cars
      description: Returns a list of all cars.
      responses:
        '200':
          description: Uma lista de veículos com informações paginadas
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    example: 2
                  total_pages:
                    type: integer
                    example: 2
                  limit:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: '5d1007ca-9d8d-42ee-b268-e46cadea6903'
                        license_plate:
                          type: string
                          example: 'ABC1234'
                        brand:
                          type: string
                          example: 'Toyota'
                        model:
                          type: string
                          example: 'Corolla'
                        year:
                          type: integer
                          example: 2020
                        status:
                          type: string
                          enum: [active, inactive]
                          example: 'active'
                        km:
                          type: integer
                          example: 15000
                        price:
                          type: number
                          format: float
                          example: 85.00
                        items:
                          type: array
                          items:
                            type: string
                            example: 'air conditioning'
                        created_at:
                          type: string
                          format: date-time
                          example: '2024-10-13T01:43:43.294Z'
                        updated_at:
                          type: string
                          format: date-time
                          example: '2024-10-13T01:43:43.294Z'
  /cars/{id}:
    get:
      tags:
        - Cars
      description: Returns a car by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Car ID
          schema:
            type: string
            format: uuid
            exeample: 'e1ef1217-14a1-4885-aeb3-b76c9fe789e2'
      parameters:
        - name: id
          in: path
          required: true
          description: Car ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Car found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: '5d1007ca-9d8d-42ee-b268-e46cadea6903'
                        license_plate:
                          type: string
                          example: 'ABC1234'
                        brand:
                          type: string
                          example: 'Toyota'
                        model:
                          type: string
                          example: 'Corolla'
                        year:
                          type: integer
                          example: 2020
                        status:
                          type: string
                          enum: [active, inactive]
                          example: 'active'
                        km:
                          type: integer
                          example: 15000
                        price:
                          type: number
                          format: float
                          example: 85.00
                        items:
                          type: array
                          items:
                            type: string
                            example: 'air conditioning'
                        created_at:
                          type: string
                          format: date-time
                          example: '2024-10-13T01:43:43.294Z'
                        updated_at:
                          type: string
                          format: date-time
                          example: '2024-10-13T01:43:43.294Z'
        '404':
          description: Car not found
        '500':
          description: Internal server error
    patch:
      tags:
        - Cars
      description: Updates a car by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Car ID
          schema:
            type: string
            format: uuid
            example: 'e1ef1217-14a1-4885-aeb3-b76c9fe789e2'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                license_plate:
                  type: string
                  example: 'EFG8H96'
                brand:
                  type: string
                  example: 'Fiat'
                model:
                  type: string
                  example: 'Cronos'
                year:
                  type: number
                  example: 2013
                km:
                  type: number
                  example: 5000
                price:
                  type: number
                  example: 130.50
                items:
                  type: array
                  items:
                    type: string
                  example:
                    - "air conditioning"
                    - "leather seats"
                    - "sunroof"
                    - "navigation system"
              required:
                - license_plate
                - brand
                - model
                - year
                - km
                - price
                - items
      responses:
        '204':
          description: Car updated
        '400':
          description: Bad Request
        '404':
          description: Car not found
        '500':
          description: Internal server error

    delete:
      tags:
        - Cars
      description: Deletes a car by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Car ID
          schema:
            type: string
            format: uuid
            example: 'e1ef1217-14a1-4885-aeb3-b76c9fe789e2'
      responses:
        '204':
          description: Car deleted
        '404':
          description: Car not found
        '500':
          description: Internal server error

  /customers:
    get:
      tags:
        - Customers
      description: Returns a list of all customers.
      responses:
        '200':
          description: Uma lista de usuários com informações paginadas
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    example: 2
                  total_pages:
                    type: integer
                    example: 2
                  limit:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: '92e948c5-fdb5-43a7-bc6d-6b6dcb5f1c84'
                        name:
                          type: string
                          example: 'Carlos2'
                        birth_date:
                          type: string
                          format: date
                          example: '1960-12-10'
                        cpf:
                          type: string
                          example: '911964918-52'
                        email:
                          type: string
                          format: email
                          example: 'carlos2@hotmail.com'
                        phone:
                          type: string
                          example: '(20) 99517-2596'
                        excluded_at:
                          type: string
                          nullable: true
                          example: null
                        created_at:
                          type: string
                          format: date-time
                          example: '2024-10-12T16:48:27.262Z'
                        updated_at:
                          type: string
                          format: date-time
                          example: '2024-10-12T17:01:01.979Z'
    post:
      tags:
        - Customers
      description: Create a new customer.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Maria Jose'
                birth_date:
                  type: string
                  format: date
                  example: '2000-01-01'
                cpf:
                  type: string
                  example: 112543552-65
                email:
                  type: string
                  example: 'marijose@seuprovedor.com.br'
                phone:
                  type: string
                  example: '(20) 99517-2596'
              required:
                - name
                - birth_date
                - cpf
                - email
                - phone
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '92e948c5-fdb5-43a7-bc6d-6b6dcb5f1c84'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'the CPF must be in the format 123123123-99.'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: internal server error
  /customers/{id}:
    get:
      tags:
        - Customers
      description: Returns a customer by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Customer ID
          schema:
            type: string
            format: uuid
            example: '92e948c5-fdb5-43a7-bc6d-6b6dcb5f1c84'
      responses:
        '200':
          description: Customer found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '435a4b24-c7bc-4481-a17a-14a2bed0d3e2'
        '404':
          description: Customer not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Customers
      description: Deletes a customer by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Customer ID
          schema:
            type: string
            format: uuid
            example: '435a4b24-c7bc-4481-a17a-14a2bed0d3e2'
      responses:
        '204':
          description: Customer deleted
        '404':
          description: Customer not found
        '500':
          description: Internal server error
    patch:
      tags:
        - Customers
      description: Updates a customer by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Customer ID
          schema:
            type: string
            format: uuid
            example: '435a4b24-c7bc-4481-a17a-14a2bed0d3e2'
      requestBody:
        application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Maria Jose'
                birth_date:
                  type: string
                  format: date
                  example: '2000-01-01'
                cpf:
                  type: string
                  example: 112543552-65
                email:
                  type: string
                  example: 'marijose@seuprovedor.com.br'
                phone:
                  type: string
                  example: '(20) 99517-2596'
      responses:
        '200':
          description: Customer updated
        '400':
          description: Bad Request
        '404':
          description: Customer not found
        '500':
          description: Internal server error
  /orders:
    post:
      tags:
        - Orders
      description: Create a new order.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                customer_id:
                  type: string
                  format: uuid
                car_id:
                  type: string
                  format: uuid
                cep:
                  type: string
                start_date:
                  type: string
                  format: date
                end_date:
                  type: string
                  format: date
              required:
                - customer_id
                - car_id
                - cep
                - start_date
                - end_date
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 'order_id_example'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Invalid input.'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: internal server error
    get:
      tags:
        - Orders
      description: Returns a list of all orders.
      responses:
        '200':
          description: Uma lista de pedidos com informações paginadas
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    example: 2
                  pages:
                    type: integer
                    example: 2
                  limit:
                    type: integer
                    example: 1
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: '37a513ae-3536-4280-8ed3-1b5087c8872f'
                        status:
                          type: string
                          enum: [approved, pending, rejected]
                          example: 'approved'
                        orderDate:
                          type: string
                          format: date-time
                          example: '2024-10-13T02:08:44.523Z'
                        startDate:
                          type: string
                          format: date-time
                          example: '2024-11-01T00:00:00.000Z'
                        endDate:
                          type: string
                          format: date-time
                          example: '2024-11-30T00:00:00.000Z'
                        orderFee:
                          type: number
                          format: float
                          example: 170
                        totalValue:
                          type: number
                          format: float
                          example: 2465170
                        cep:
                          type: string
                          example: '04689-070'
                        city:
                          type: string
                          example: 'São Paulo'
                        uf:
                          type: string
                          example: 'SP'
                        customer:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              example: '92e948c5-fdb5-43a7-bc6d-6b6dcb5f1c84'
                            name:
                              type: string
                              example: 'Carlos2'
                            cpf:
                              type: string
                              example: '911964918-52'
  /orders/{id}:
    get:
      tags:
        - Orders
      description: Returns an order by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do pedido a ser recuperado
          schema:
            type: string
            format: uuid
            example: '37a513ae-3536-4280-8ed3-1b5087c8872f'
      responses:
        200:
          description: Pedido aprovado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: '37a513ae-3536-4280-8ed3-1b5087c8872f'
                  status:
                    type: string
                    example: 'approved'
                  orderDate:
                    type: string
                    format: date-time
                    example: '2024-10-13T02:08:44.523Z'
                  startDate:
                    type: string
                    format: date
                    example: '2024-11-01'
                  endDate:
                    type: string
                    format: date
                    example: '2024-11-30'
                  orderFee:
                    type: number
                    example: 170
                  totalValue:
                    type: number
                    example: 2465170
                  cep:
                    type: string
                    example: '04689-070'
                  city:
                    type: string
                    example: 'São Paulo'
                  uf:
                    type: string
                    example: 'SP'
                  customer:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: '92e948c5-fdb5-43a7-bc6d-6b6dcb5f1c84'
                      name:
                        type: string
                        example: 'Carlos2'
                      email:
                        type: string
                        format: email
                        example: 'carlos2@hotmail.com'
                      cpf:
                        type: string
                        example: '911964918-52'
                  car:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: '5d1007ca-9d8d-42ee-b268-e46cadea6903'
                      brand:
                        type: string
                        example: 'Toyota'
                      model:
                        type: string
                        example: 'Corolla'
                      year:
                        type: integer
                        example: 2020
                      km:
                        type: integer
                        example: 15000
                      items:
                        type: array
                        items:
                          type: string
                        example:
                          - 'air conditioning'
                          - 'sunroof'
                          - 'leather seats'
                          - 'navigation system'
                      licensePlate:
                        type: string
                        example: 'ABC1234'
                      dailyValue:
                        type: number
                        example: 85000
        '404':
          description: Pedido não encontrado
        '500':
          description: Erro interno do servidor
    delete:
      tags:
        - Orders
      description: Deletes an order by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
            format: uuid
            example: '37a513ae-3536-4280-8ed3-1b5087c8872f'
      responses:
        '204':
          description: Order deleted
        '404':
          description: Order not found
        '500':
          description: Internal server error
components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
          example: 'Jose Carlos'
        email:
          type: string
          example: 'josecarlos@seuemail.com.br'
        password:
          type: string
          example: 'TRRESde236#$'
      required:
        - name
        - email
        - password
    Car:
      type: object
      properties:
        license_plate:
          type: string
          example: "ABC1D23"
        brand:
          type: string
          example: "Toyota"
        model:
          type: string
          example: "Corolla"
        year:
          type: number
          example: 2020
        km:
          type: number
          example: 30000
        price:
          type: number
          example: 495.50
        items:
          type: array
          items:
            type: string
          example:
            - "air conditioning"
            - "leather seats"
            - "sunroof"
            - "navigation system"
      required:
        - license_plate
        - brand
        - model
        - year
        - km
        - price
        - items
    Customer:
      type: object
      properties:
        name:
          type: string
          example: "João Silva"
        birth_date:
          type: string
          format: date
          example: "1985-04-12"
        cpf:
          type: string
          example: "123.456.789-00"
        email:
          type: string
          format: email
          example: "joao.silva@example.com"
        phone:
          type: string
          example: "+55 11 91234-5678"
      required:
        - name
        - birth_date
        - cpf
        - email
        - phone
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '37a513ae-3536-4280-8ed3-1b5087c8872f'
        status:
          type: string
          enum: [approved, pending, rejected]
          example: 'approved'
        orderDate:
          type: string
          format: date-time
          example: '2024-10-13T02:08:44.523Z'
        startDate:
          type: string
          format: date-time
          example: '2024-11-01T00:00:00.000Z'
        endDate:
          type: string
          format: date-time
          example: '2024-11-30T00:00:00.000Z'
        orderFee:
          type: number
          format: float
          example: 170
        totalValue:
          type: number
          format: float
          example: 2465170
        cep:
          type: string
          example: '04689-070'
        city:
          type: string
          example: 'São Paulo'
        uf:
          type: string
          example: 'SP'
        customer:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: '92e948c5-fdb5-43a7-bc6d-6b6dcb5f1c84'
            name:
              type: string
              example: 'Carlos2'
            email:
              type: string
              format: email
              example: 'carlos2@hotmail.com'
            cpf:
              type: string
              example: '911964918-52'
        car:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: '5d1007ca-9d8d-42ee-b268-e46cadea6903'
            brand:
              type: string
              example: 'Toyota'
            model:
              type: string
              example: 'Corolla'
            year:
              type: integer
              example: 2020
            km:
              type: integer
              example: 15000
            items:
              type: array
              items:
                type: string
                example: 'air conditioning'
            licensePlate:
              type: string
              example: 'ABC1234'
            dailyValue:
              type: number
              format: float
              example: 85000
